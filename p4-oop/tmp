For Django users, the most important class in Figure 12-5 is ListView which is an
aggregate class, with no code at all (its body is just a docstring). When instantiated, a
ListView has an object_list instance attribute through which the template can iterate
to show the page contents, usually the result of a database query returning multiple
objects. All the functionality related to generating this iterable of objects comes from
the MultipleObjectMixin . That mixin also provides the complex pagination logic —
to display part of the results in one page and links to more pages.
Suppose you want to create a view that will not render a template, but will produce a
list of objects in JSON format. Thats’ why the BaseListView exists. It provides an easy
to use extension point that brings together View and MultipleObjectMixin function‐
ality, without the overhead of the template machinery.
The Django Class-based views API is a better example of multiple inheritance than
Tkinter. In particular, it is easy to make sense of its mixin classes: each has a well defined
purpose, and they are all named with the ...Mixin suffix.
Class-based views were not universally embraced by Django users. Many do use them
in a limited way, as black boxes, but when it’s necessary to create something new, a lot
of Django coders continue writing monolithic view functions that take care of all those
responsibilities, instead of trying to reuse the base views and mixins.
